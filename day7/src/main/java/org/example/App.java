/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.example;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.Stream;


import org.advent.MainApp;
import org.advent.Utils;


public class App implements MainApp{
    

    public static void main(String[] args) throws Exception {
        Utils.DEBUG = true;
        Utils.main(new App());
    }
    
    
    public void run() throws Exception {

        CamelCardsGame game = new CamelCardsGame();

        Utils.start("day7", "data1.in", line->{
            String[] val = line.split(" ");
            game.hands.add(new Hand(val[0], Integer.valueOf(val[1])));
        });
        
        //Utils.debug(game.hands);
        List<Hand> sorteHands = game.hands.stream().sorted().toList();
        Utils.debug(sorteHands);

        int res = 0;
        for (int i = 0; i < sorteHands.size(); i++) {
            res += ((i+1)*sorteHands.get(i).bid);
        }
        Utils.debug(res);
    }


    static class CamelCardsGame{
        List<Hand> hands = new ArrayList<>();

        @Override
        public String toString() {
            return "CamelCardsGame [hands=" + hands + "]";
        }

        
    }


    static class Hand implements Comparable<Hand>{
        String value;
        List<Card> cards;
        int bid;

        double type;

        public Hand(String value, Integer bid) {
            this.value = value;
            this.bid = bid;
            this.cards = value.chars().mapToObj(Card::new).toList();
            this.type = calculateType();
        }

        private double calculateType(){
            Map<Card, Long> countByCard = this.cards.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
            List<Integer> numberOfSamCard = countByCard.values().stream().map(Long::intValue).toList();
            int maxSameCard = numberOfSamCard.stream().reduce(Integer::max).orElse(1);
            if (maxSameCard == 3 && numberOfSamCard.size() == 2) return 3.5; //full house
            if (maxSameCard == 2 && numberOfSamCard.size() == 3) return 2.5; //two pair
            return maxSameCard;
        }

        @Override
        public String toString() {
            return "Hand [value=" + value + ", bid=" + bid + ", type=" + type + "]";
        }


        @Override
        public int compareTo(Hand o) {
            if (type != o.type) return Double.compare(type, o.type);
            for (int i = 0; i < 5; i++) {
                Card o1 = cards.get(i);
                Card o2 = o.cards.get(i);
                if (!o1.equals(o2)) return o1.compareTo(o2);
            }
            return 0;
        }
        
    }

    static class Card implements Comparable<Card>{
        char value;
        public Card(int c){
            this.value = (char) c;
        }
        public int getStrength(){
            return value == 'A' ? 14 : value == 'K' ? 13 : value == 'Q' ? 12 : value == 'J' ? 11 : value == 'T' ? 10 : Character.getNumericValue(value);
        }
        @Override
        public String toString() {
            return value+"";
        }
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + value;
            return result;
        }
        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            Card other = (Card) obj;
            if (value != other.value)
                return false;
            return true;
        }

        @Override
        public int compareTo(Card o) {
            return Integer.compare(this.getStrength(), o.getStrength());
        }

        
    }

}

