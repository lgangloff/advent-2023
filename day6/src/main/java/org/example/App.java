/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.example;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.Stream;


import org.advent.MainApp;
import org.advent.Utils;


public class App implements MainApp{
    

    public static void main(String[] args) throws Exception {
        Utils.DEBUG = true;
        Utils.main(new App());
    }
    
    
    public void run() throws Exception {

        BoatRaces boatRaces = new BoatRaces();

        Utils.startByReader("day6", "data1.in", br->{
            try {
                String lineTime = br.readLine();
                String lineDistance = br.readLine();

                List<Integer> times = Stream.of(lineTime.replace("Time:", "").trim().split(" ")).filter(Predicate.not(String::isBlank)).map(Integer::valueOf).toList();
                List<Long> distances = Stream.of(lineDistance.replace("Distance:", "").trim().split(" ")).filter(Predicate.not(String::isBlank)).map(Long::valueOf).toList();

                for (int i = 0; i < times.size(); i++) {
                    Race r = new Race();
                    r.duration = times.get(i);
                    r.distanceRecord = distances.get(i);
                    boatRaces.races.add(r);
                }


            } catch (IOException e) {
                e.printStackTrace();
            }
        });
        
        Integer result = boatRaces.races.stream().parallel().map(Race::findWinningOption).map(r->r.raceOptionsToWin.size()).reduce(Math::multiplyExact).orElse(0);


        Utils.debug(result);
    }


    static class BoatRaces{
        List<Race> races = new ArrayList<>();

        @Override
        public String toString() {
            return "BoatRaces [races=" + races + "]";
        }

        
    }


    static class Race{
        int duration;
        long distanceRecord;

        List<RaceOption> raceOptionsToWin = new ArrayList<>();

        public Race findWinningOption(){
            this.raceOptionsToWin = LongStream.range(0, duration+1).parallel().mapToObj(RaceOption::new).filter(opt->opt.isWinning(this)).toList();
            return this;
        }

        @Override
        public String toString() {
            return "Race [duration=" + duration + ", distanceRecord=" + distanceRecord + ", raceOptionsToWin="
                    + raceOptionsToWin + "]";
        }

    }

    static class RaceOption {


        long holdTime;
        

        public RaceOption(long holdTime) {
            this.holdTime = holdTime;
        }


        public boolean isWinning(Race race){
            long restTime = race.duration - holdTime;
            long distance = restTime * holdTime;
            return distance > race.distanceRecord;
        }


        @Override
        public String toString() {
            return "[hold=" + holdTime + "]";
        }

        
    }
}

