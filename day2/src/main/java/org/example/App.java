/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.example;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.advent.Utils;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }
    static int sum = 0;
    static int sumOfPower = 0;
    public static void main(String[] args) throws FileNotFoundException, IOException {
        
        Subset mustMatch = new Subset(12, 13, 14);
        
        Utils.start("day2", "data1.in", line->{

            Game game = parseGame(line);

            //System.out.println(line);
            System.out.println(game + " => " + game.match(mustMatch));

            if (game.match(mustMatch)){
                sum += game.id;
            }

            sumOfPower += game.minimumSubSetToWin().power();

        });

        System.out.println(sum);
        System.out.println(sumOfPower);
    }
    
    private static Game parseGame(String line) {
        int id = Integer.parseInt(line.substring(4, line.indexOf(":")).trim());
        Game game = new Game(id);
        String[] subsets = line.substring(line.indexOf(":")+1).trim().split(";");
        for (String subset : subsets) {
            String[] cubes = subset.trim().split(",");
            Subset s = new Subset();
            for(String cube : cubes){
                String[] c = cube.trim().split(" ");
                switch (c[1]) {
                    case "red":
                        s.red = Integer.parseInt(c[0]);
                        break;
                    case "green":
                        s.green = Integer.parseInt(c[0]);
                        break;
                    case "blue":
                        s.blue = Integer.parseInt(c[0]);
                        break;
                }
            }
            game.subsets.add(s);
        }
        return game;
    }

    static class Game {

        public Game(int id) {
            this.id = id;
        }
        final int id;
        final List<Subset> subsets = new ArrayList<>();
        @Override
        public String toString() {
            return "Game [id=" + id + ", subsets=" + subsets + ", sum="+sum()+"]";
        }

        Subset sum(){
            return subsets.stream().reduce(new Subset(), (a,b) -> {
                a.red += b.red;
                a.green += b.green;
                a.blue += b.blue;
                return a;
            });
        }
        boolean match(Subset subset){
            return subsets.stream().allMatch(aSubSet -> aSubSet.min(subset));
        }

        Subset minimumSubSetToWin(){
            return subsets.stream().reduce(new Subset(), (a,b) ->{
                a.red = Math.max(a.red, b.red);
                a.green = Math.max(a.green, b.green);
                a.blue = Math.max(a.blue, b.blue);
                return a;
            });
        }

    }

    static class Subset{
        int red = 0, green = 0, blue = 0;

        
        public Subset() {
        }

        public Subset(int red, int green, int blue) {
            this.red = red;
            this.green = green;
            this.blue = blue;
        }

        @Override
        public String toString() {
            return "[red=" + red + ", green=" + green + ", blue=" + blue + "]";
        }

        public boolean min(Subset other) {
            return this.red <= other.red && this.green <= other.green && this.blue <= other.blue;
        }
        
        public int power(){
            return red*green*blue;
        }
    }
}

