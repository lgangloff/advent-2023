/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.example;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class App {

    public static void main(String[] args) throws FileNotFoundException, IOException {
        try (BufferedReader br = new BufferedReader(new FileReader("app/src/main/resources/data1.in"))) {
            String line = br.readLine();
            int sum = 0;
            while (line != null) {


                int number = 0;
                for (int i = 0; i < line.length(); i++) {
                    Optional<Integer> res = getDigit(line, i, true);
                    if(res.isPresent()){
                        number = res.get() * 10;
                        break;
                    }
                }

                for (int i = line.length()-1; i >= 0 ; i--) {
                    Optional<Integer> res = getDigit(line, i, false);
                    if(res.isPresent()){
                        number += res.get();
                        break;
                    }
                }

                sum += number;
                System.out.println(line + " => " + number);
                line = br.readLine();
            }
            System.out.println(sum);
        }
    }

    public static Optional<Integer> getDigit(String line, int index, boolean toRight){

        char c = line.charAt(index);
        if (Character.isDigit(c))
            return Optional.of(Character.digit(c, 10));

        for (String nAsString : values) {
            int startIdx = toRight ? index : index - nAsString.length() + 1;
            int endIdx = toRight ? index + nAsString.length() : index + 1;

            if (endIdx <= line.length() && startIdx >= 0){ 
                String extracted = line.substring(startIdx, endIdx);
            
                if (extracted.equals(nAsString)){
                    return Optional.of(map.get(extracted));
                }
                
            }
        }
        
        return Optional.empty();
    }

    private final static List<String> values = Arrays.asList(
        "one", 
        "two",
        "three",
        "four", 
        "five",
        "six",
        "seven",
        "eight",
        "nine");
    private final static Map<String, Integer> map = Map.of(
        "one",  1,
        "two",  2,
        "three",3,
        "four", 4,
        "five", 5,
        "six",  6,
        "seven",7,
        "eight",8,
        "nine", 9);

        /* 
    private static String cleanLine(String line) {
        
        String matched = null;
        while(true){
            int pos = line.length();
            for (String key : values) {
                int idx = line.indexOf(key);
                if (idx != -1 && idx < pos){
                    //System.out.println("Search " + key + " => " + idx);
                    pos = idx;
                    matched = key;
                }
            }
            if(matched != null){
                line = line.replaceFirst(matched, map.get(matched));
                //System.out.println(line);
                matched = null;
            }
            else
                return line;
        }
    } */
}
